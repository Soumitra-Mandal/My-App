{"version":3,"sources":["App.js","Comments.js","login.js","serviceWorker.js","index.js"],"names":["interval","Automate","props","resetTimer","setState","time","startTimer","state","isstopped","setInterval","clearInterval","id","this","className","onClick","React","Component","App","initialState","nc","store","createStore","action","type","data","mapDispatchToProps","addComment","name","comment","Cl","connect","listItems","map","val","index","key","Ac","useState","setName","setComment","handleInput","e","target","value","onChange","placeholder","autoComplete","preventDefault","Comments","href","rel","Home","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","span","offset","Check","label","Button","Login","Navbar","bg","variant","Brand","Link","to","Nav","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16bcf717.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n//import { useEffect, useState } from 'react';\n//import { Provider } from 'react-redux';\n//import { createStore } from 'redux';\n//import { connect } from 'react-redux';\n\n\nvar interval='';\nclass Automate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {time: 0, isstopped:true };\n  }\n\n\n resetTimer= () => {\n  this.setState({time:0});\n}\n\nstartTimer=()=>{\n  if(this.state.isstopped===true){\n    interval = setInterval(()=>{   \n      this.setState({time: this.state.time + 1});        \n},1000);\n  }\n  else{\n    clearInterval(interval);\n  }\nthis.setState({isstopped:!this.state.isstopped});\n\n}\n\n  render() {\n    return (\n      <div>\n      <h1 id=\"head\">{this.state.time}s</h1>\n      <button className=\"stop\" onClick ={this.startTimer}>{this.state.isstopped ? 'START' : 'STOP'}</button>\n      <button className=\"reset\" onClick={this.resetTimer}>RESET</button>\n    </div>\n    );\n  }\n}\n\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Automate/>\n    </div>\n  );\n}\n\n\nexport default App;\n\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport './Comments.css';\r\n\r\nconst initialState = {\r\n  nc:[ ]\r\n}\r\n\r\n// Action Creator\r\n function addComment(name, comment) {\r\n  return {\r\n      type: 'ADD_COMMENT',\r\n      data: {name:name, comment:comment}\r\n  }\r\n}\r\n\r\n\r\n// Reducer function\r\nfunction reducer(state = initialState, action) {\r\n  switch(action.type) {\r\n    case 'ADD_COMMENT':\r\n      return {...state,\r\n        nc: [...state.nc, action.data]}\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst store = createStore(reducer);\r\n\r\n\r\nconst mapDispatchToProps = {\r\n  addComment\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    nc: state.nc\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nfunction AddCommentForm(props){\r\nconst [name, setName]=useState('');\r\nconst [comment, setComment] = useState('');\r\n\r\nfunction handleInput(e){\r\n  const target = e.target;\r\n  switch(target.name){\r\n    case 'name': setName(target.value);\r\n    break;\r\n    case 'cmt': setComment(target.value);\r\n    break;\r\n    default: break;\r\n  }\r\n\r\n}\r\n\r\nfunction handleSubmit(e){\r\n  if(comment !== '' && name!=='') {\r\n    props.addComment(name,comment);\r\n    setName('');\r\n    setComment('');\r\n\r\n  }\r\n  e.preventDefault();\r\n\r\n}\r\n\r\nreturn(\r\n  <div className=\"inputbox\">\r\n    <input type=\"text\" name=\"name\" onChange={handleInput} value={name} id='nm' placeholder=\"Enter Your Name\" autoComplete=\"Off\"></input>\r\n    <br></br>\r\n    <br></br>\r\n    <textarea name='cmt' onChange={handleInput} value={comment} id='cmt' placeholder=\"Enter Your Comment\"></textarea>\r\n    <br></br>\r\n    <input type=\"submit\" value=\"Post\" onClick={handleSubmit} id=\"submit\"></input>\r\n  </div>\r\n    );\r\n\r\n}\r\n\r\nfunction CommentsList(props){\r\n  const arr = props.nc;\r\n  const listItems = arr.map((val, index) =>\r\n    <li key={index}><h3>{val.name}</h3><p>{val.comment}</p></li>\r\n  );\r\n  return <ol id=\"comments\">{listItems}</ol>;\r\n}\r\n\r\nconst Cl = connect(mapStateToProps)(CommentsList);\r\nconst Ac =  connect(null, mapDispatchToProps)(AddCommentForm);\r\n\r\nfunction Comments() {\r\n  return (\r\n    <div className=\"Comment\">\r\n        <h1>Comments</h1>\r\n        <link href='https://fonts.googleapis.com/css?family=Poppins' rel='stylesheet'></link>\r\n        <Provider store={store}>\r\n        <Ac/>\r\n        <Cl/>\r\n        </Provider>\r\n    </div>\r\n  );\r\n}\r\n \r\n\r\nexport default Comments;\r\n\r\n","import React from 'react';\r\nimport './Comments.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Navbar, Nav, Form, Button, Row, Col} from 'react-bootstrap';\r\nimport App from './App.js';\r\nimport {BrowserRouter as  Router, Route, Link ,Switch} from 'react-router-dom';\r\nimport Comments from './Comments.js';\r\n\r\n\r\nfunction Home(){\r\n    return(\r\n      <>\r\n      <h1>Welcome to My react Apps</h1>\r\n    <div id = 'login'>    \r\n    <Form>\r\n  <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n    <Form.Label column sm={4}>\r\n    </Form.Label>\r\n    <Col sm={4}>\r\n      <Form.Control type=\"email\" placeholder=\"Email\" />\r\n    </Col>\r\n  </Form.Group>\r\n\r\n  <Form.Group as={Row} controlId=\"formHorizontalPassword\">\r\n    <Form.Label column sm={4}>\r\n    </Form.Label>\r\n    <Col sm={4}>\r\n      <Form.Control type=\"password\" placeholder=\"Password\" />\r\n    </Col>\r\n  </Form.Group>\r\n  \r\n  <Form.Group as={Row} controlId=\"formHorizontalCheck\">\r\n    <Col sm={{ span: 10, offset: 4 }}>\r\n      <Form.Check label=\"Remember me\" />\r\n    </Col>\r\n  </Form.Group>\r\n\r\n  <Form.Group as={Row}>\r\n    <Col sm={{ span: 10, offset: 4 }}>\r\n      <Button type=\"submit\">Sign in</Button>\r\n    </Col>\r\n  </Form.Group>\r\n</Form>\r\n   </div>\r\n   </>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\nclass Login extends React.Component {\r\nrender() {\r\n    return(\r\n    <>\r\n      <Router>\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand as={Link} to=\"/\">Home/Login</Navbar.Brand>\r\n    <Nav className=\"mr-auto\">\r\n      <Nav.Link as={Link} to=\"/timer\">Timer</Nav.Link> \r\n      <Nav.Link as={Link} to=\"/com\">Comments</Nav.Link>\r\n    </Nav>\r\n  </Navbar>\r\n<Switch>\r\n    <Route exact path=\"/\">\r\n            <Home />\r\n          </Route>\r\n         <Route exact path=\"/timer\">\r\n            <App />\r\n          </Route>\r\n          <Route exact path=\"/com\">\r\n            <Comments />\r\n          </Route>\r\n          </Switch>\r\n</Router>\r\n  \r\n  </>\r\n  );\r\n    \r\n  }\r\n\r\n}\r\n\r\nexport default Login;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport Login from './login';\n//import Comments from './Comments';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Login />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}